/*【news.html】
	news组件中调用子组件给子组件定义一个名称

	<app-header #header></app-header>

	<div #myBox>
    		我是一个dom节点
	</div>
	<button (click)="getChildMsg()">获取子组件的数据</button>
	<button (click)="getChildRun()">获取子组件的方法</button>
*/

/*【header.ts】
	//header 组件中定义一个数据、方法

	public msg='我是子组件header的一个msg';

	run(){

 	   console.log('我是header里面的run方法');
 	 }

*/

引入ViewChild
    import { Component, OnInit ,ViewChild} from '@angular/core';


/*【news.ts】
import { Component, OnInit , ViewChild} from '@angular/core';

@Component({
  selector: 'app-news',
  templateUrl: './news.component.html',
  styleUrls: ['./news.component.scss']
})
export class NewsComponent implements OnInit {

  //获取dom节点
  @ViewChild('myBox') myBox:any;

  //获取一个组件
  @ViewChild('header') header:any;

  constructor() { }

  ngOnInit() {
  }

  ngAfterViewInit(): void {
   
    console.log(this.myBox.nativeElement);

    this.myBox.nativeElement.style.width='100px';
    this.myBox.nativeElement.style.height='100px';
    this.myBox.nativeElement.style.background='red';
    console.log(this.myBox.nativeElement.innerHTML);

   
  }

  getChildMsg(){
    //获取子组件的数据
    alert(this.header.msg);

  }
  getChildRun(){
    //调用子组件的方法
    this.header.run();
  }
}

*/